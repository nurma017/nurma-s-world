from telegram import Update
from telegram.ext import ContextTypes
import storage

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/config <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–ª–∏–º–∏—Ç> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç\n"
        "/log <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—Å—É–º–º–∞> ‚Äî –≤–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ –¥–æ—Ö–æ–¥\n"
        "/summary ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏ –±—é–¥–∂–µ—Ç—ã\n"
        "/notifyon ‚Äî –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/notifyoff ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )

async def config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /config Food 50000")
        return

    category, limit = args[0], args[1]
    user_id = update.effective_user.id
    data = storage.load_data(user_id)

    if "budgets" not in data:
        data["budgets"] = {}
    data["budgets"][category] = int(limit)

    storage.save_data(user_id, data)
    await update.message.reply_text(f"‚úÖ –ë—é–¥–∂–µ—Ç –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit} —Ç–≥")

async def log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /log Food -1000 –∏–ª–∏ /log Salary 30000")
        return

    category, amount = args[0], int(args[1])
    user_id = update.effective_user.id
    data = storage.load_data(user_id)

    if "records" not in data:
        data["records"] = []

    data["records"].append({"category": category, "amount": amount})
    storage.save_data(user_id, data)

    await update.message.reply_text(f"üì• –ó–∞–ø–∏—Å–∞–Ω–æ: {category} ‚Äî {amount} —Ç–≥")

async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = storage.load_data(user_id)

    total = 0
    categories = {}

    for record in data.get("records", []):
        total += record["amount"]
        cat = record["category"]
        categories[cat] = categories.get(cat, 0) + record["amount"]

    response = f"üìä –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total} —Ç–≥\n\n"
    for cat, amt in categories.items():
        limit = data.get("budgets", {}).get(cat, None)
        if limit:
            response += f"{cat}: {amt} / {limit} —Ç–≥\n"
        else:
            response += f"{cat}: {amt} —Ç–≥ (–±–µ–∑ –ª–∏–º–∏—Ç–∞)\n"

    await update.message.reply_text(response)

async def notify_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã (–Ω–æ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã)")

async def notify_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")